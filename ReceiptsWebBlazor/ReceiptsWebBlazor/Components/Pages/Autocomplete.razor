@rendermode InteractiveServer

@using Microsoft.EntityFrameworkCore

@inherits InputText


@inject IDbContextFactory<ReceiptsContext> DbFactory

<input type="text" @bind="BoundValue" @oninput="HandleInput" />
@if (searchList is not null)
{
    @if (searchList.Any())
    {
        <ul class="options">
            @foreach (var product in searchList)
            {
                <li class="option" @onmousedown=@(_ => SelectProduct(product))>
                    <span class="option-text">@product</span>
                </li>
            }
        </ul>
    }
}

@code {
    private async Task<IEnumerable<string>> SearchProducts(string searchText)
    {
        using var context = DbFactory.CreateDbContext();

        return await Task.FromResult(context.Products.Where(
                     x => x.Name.ToLower().Contains(searchText.ToLower())).Select(p => p.Name).Distinct().Take(10).ToList());
    }

    string? BoundValue { get; set; }

    // Wait period in (ms) after the user stops typing.
    const int DebounceMs = 300;

    // Timer for debounce.
    System.Timers.Timer? timer;

    private IEnumerable<string>? searchList;

    void HandleInput(ChangeEventArgs e)
    {
        BoundValue = e?.Value?.ToString();

        timer?.Dispose();
        timer = new(DebounceMs);
        timer.Elapsed += NotifyTimerElapsed;
        timer.Enabled = true;
    }

    // Fired after debounce time.
    // sender: Timer
    // e: Event args
    private async void NotifyTimerElapsed(object? sender, System.Timers.ElapsedEventArgs e)
    {
        timer?.Dispose();
        timer = null;
        if (BoundValue != null)
        {
            searchList = await SearchProducts(BoundValue);

            //Refresh the interface since we are in a thread
            await InvokeAsync(StateHasChanged);
        }
        else
        {
            searchList = null;
        }
    }

    void SelectProduct(string product)
    {
        BoundValue = product;
        searchList = null;
    }

    void ClearSearchList()
    {
        searchList = null;
    }
}
