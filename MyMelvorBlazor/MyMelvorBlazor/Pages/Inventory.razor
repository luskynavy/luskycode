@page "/inventory"
@using MyMelvorBlazor.Models
@using CurrieTechnologies.Razor.SweetAlert2
@inject SweetAlertService Swal
@using BlazorSortableList

<PageTitle>Inventory</PageTitle>

<span>Inventory</span>
<section>
	<aside class="right ms-3">
		<div>
			@if (selectedId == null)
			{
				<span>No item selected</span>
			}
			else
			{
				<span>@selectedItem?.Name</span>
			}
			<br>
			@if (selectedId != null)
			{
				<span>@selectedItem?.Description</span>
			}
		</div>
		<br>
		<input disabled=@(selectedId==null) @bind="range" @bind:event="oninput" type="range" min="1" max="@(selectedItem==null ? 1 : selectedItem?.Count)" class="slider" id="myRange">
		<button disabled=@(selectedId==null) @onclick="SellItem">Sell @range</button>
	</aside>
	@*
	<div class="items">
		@foreach (var element in Player.Inventory)
		{
			<span class="item p-1"
				  @onclick="() => SelectItem(element.Id)"
				  @onmouseover="() => hoverId = element.Id" @onmouseleave="() => hoverId = null">
				<div class="d-inline-flex flex-column">
					<span class="@(selectedId==element.Id ? "selectedItem" : "")">@element.Name x @element.Count</span>
					@if (hoverId == element.Id)
					{
						<span class="m-2">
							@element.Description
						</span>
					}
				</div>
			</span>
		}
	</div>
	*@

	<div class="items">
		<SortableList Items="Player.Inventory" Context="element" OnUpdate="OnUpdate">
			<SortableItemTemplate>
				<span class="item p-1"
					  @onclick="() => SelectItem(element.Id)"
					  @onmouseover="() => hoverId = element.Id" @onmouseleave="() => hoverId = null">
					<div class="d-inline-flex flex-column">
						<span class="@(selectedId==element.Id ? "selectedItem" : "")">@element.Name x @element.Count</span>
						@if (hoverId == element.Id)
						{
							<span class="m-2">
								@element.Description
							</span>
						}
					</div>
				</span>
			</SortableItemTemplate>
		</SortableList>
	</div>

</section>

@code {
	private ItemId? hoverId = null;
	private ItemId? selectedId = null;
	private int range = 1;
	private InventoryItemClass? selectedItem = null;

	[CascadingParameter] private Layout.MainLayout? MainLayout { get; set; }

	private void SelectItem(ItemId? itemId)
	{
		selectedId = itemId;
		selectedItem = Player.Inventory.FirstOrDefault(i => i.Id == itemId);
		range = 1;
	}

	private async void SellItem()
	{
		if (selectedId != null)
		{
			var message = range + " " + selectedItem?.Name;
			//Sell question
			SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
				{
					Text = "Sell " + message + " ?",
					Icon = "warning",
					ShowCancelButton = true,
					ConfirmButtonColor = "#3085d6",
					CancelButtonColor = "#d33"
				});

			if (!string.IsNullOrEmpty(result.Value))
			{
				Player.SellItem(selectedId, range);

				var itemRemaining = Player.Inventory.FirstOrDefault(i => i.Id == selectedId);

				//Remove selection if all items sold
				if (itemRemaining == null)
				{
					selectedId = null;
					selectedItem = null;
					range = 1;
				}
				//Range value can't be more than item count
				else if (range > itemRemaining.Count)
				{
					range = itemRemaining.Count;
				}

				//Sold message
				await Swal.FireAsync("", "You have sold " + message, "success");

				//Force refresh of inventory
				StateHasChanged();
			}
		}


	}

	private void LoadValues()
	{
		Player.LoadValues();
		MainLayout?.UpdateMenu();
	}

	private void OnUpdate((int oldIndex, int newIndex) indices)
	{
		// deconstruct the tuple
		var (oldIndex, newIndex) = indices;

		var itemToMove = Player.Inventory[oldIndex];
		Player.Inventory.RemoveAt(oldIndex);

		if (newIndex < Player.Inventory.Count)
		{
			Player.Inventory.Insert(newIndex, itemToMove);
		}
		else
		{
			Player.Inventory.Add(itemToMove);
		}
	}
}
