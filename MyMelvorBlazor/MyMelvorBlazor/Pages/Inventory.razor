@page "/inventory"
@using MyMelvorBlazor.Models

<PageTitle>Inventory</PageTitle>

<span>Inventory</span>
<section>
	<aside class="right ms-3">
		<div>
			@if (selectedId == null)
			{
				<span>No item selected</span>
			}
			else
			{
				<span>@selectedItem?.Name</span>
			}
			<br>
			@if (selectedId != null)
			{
				<span>@selectedItem?.Description</span>
			}
		</div>
		<br>
		<input disabled=@(selectedId==null) @bind="range" type="range" min="1" max="@(selectedItem==null ? 1 : selectedItem?.Count)" class="slider" id="myRange">
		<button disabled=@(selectedId==null) @onclick="SellItem">Sell @range</button>
	</aside>
	@*   <draggable class="items"
	v-model="player.inventory"
	item-key="Id">
	<template #item="{element}">
	<div class="item p-1" :key="element.Id"
	@click="selectItem(element.Id)"
	@mouseover="hoverId = element.Id" @mouseleave="hoverId = -1">
	<div class="d-inline-flex flex-column">
	<span :class="selectedId==element.Id ? 'selectedItem' : ''">{{element.Name}} x {{element.Count}}</span>
	<span v-if="hoverId==element.Id" class="m-2">
	{{element.Description}}
	</span>
	</div>
	</div>
	</template>
	</draggable> *@

	<div class="items">
		@foreach (var element in Player.Inventory)
		{
			<span class="item p-1"
				  @onclick="() => SelectItem(element.Id)"
				  @onmouseover="() => hoverId = element.Id" @onmouseleave="() => hoverId = null">
				<div class="d-inline-flex flex-column">
					<span class="@(selectedId==element.Id ? "selectedItem" : "")">@element.Name x @element.Count</span>
					@if (hoverId == element.Id)
					{
						<span class="m-2">
							@element.Description
						</span>
					}
				</div>
			</span>
		}
	</div>
</section>

@code {
	private ItemId? hoverId = null;
	private ItemId? selectedId = null;
	private int range = 1;
	private InventoryItemClass? selectedItem = null;

	[CascadingParameter] private Layout.MainLayout? MainLayout { get; set; }

	private void SelectItem(ItemId? itemId)
	{
		selectedId = itemId;
		selectedItem = Player.Inventory.FirstOrDefault(i => i.Id == itemId);
		range = 1;
	}

	private void SellItem()
	{
		if (selectedId != null)
		{
			Player.SellItem(selectedId, range);

			var itemRemaining = Player.Inventory.FirstOrDefault(i => i.Id == selectedId);

			//Remove selection if all items sold
			if (itemRemaining == null)
			{
				selectedId = null;
				selectedItem = null;
				range = 1;
			}
			//Range value can't be more than item count
			else if (range > itemRemaining.Count)
			{
				range = itemRemaining.Count;
			}
		}
	}

	private void LoadValues()
	{
		Player.LoadValues();
		MainLayout?.UpdateMenu();
	}
}
